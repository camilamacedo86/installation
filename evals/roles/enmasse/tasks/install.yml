---
- name: "Check EnMasse artifact {{ enmasse_version }} exists"
  stat:
    path: "/tmp/enmasse-{{ enmasse_version }}.tgz"
  register: enmasse_artifact

- name: "Retrieve EnMasse {{ enmasse_version }} artifact"
  get_url:
    url: "{{enmasse_release_location}}"
    dest: "/tmp/enmasse-{{ enmasse_version }}.tgz"
  when: 
    enmasse_artifact.stat.exists == False

- name: Install gnu-tar required for MacOSX
  shell: brew install gnu-tar
  when: ansible_os_family == "Darwin"

- name: Extract EnMasse artifact contents
  unarchive:
    src: "/tmp/enmasse-{{ enmasse_version }}.tgz"
    dest: /tmp/

- name: Add EnMasse configurations to hosts file
  blockinfile:
    block: "{{ lookup('template', 'enmasse_hosts.j2') }}"
    marker: "# {mark} GENERATED BY ENMASSE INSTALLER"
    dest: "{{ playbook_dir }}/../inventories/hosts"

- name: Check EnMasse namespace for existing resources
  shell: oc get all -n {{ enmasse_namespace }}
  register: enmasse_resources_exist

- name: "Provision EnMasse {{ enmasse_version }}"
  shell: ansible-playbook -i inventories/hosts /tmp/enmasse-"{{ enmasse_version }}"/ansible/playbooks/openshift/deploy_all.yml
  args:
    chdir: "../"
  when: enmasse_resources_exist.stderr == "No resources found."

- name: "Verify EnMasse deployment succeeded"
  shell: sleep 5; oc get pods --namespace {{ enmasse_namespace }}  |  grep  "deploy"
  register: result
  until: not result.stdout
  retries: 50
  delay: 10
  failed_when: result.stdout
  changed_when: False

- name: Remove EnMasse configurations from hosts file
  blockinfile:
    block: "{{ lookup('template', 'enmasse_hosts.j2') }}"
    marker: "# {mark} GENERATED BY ENMASSE INSTALLER"
    dest: "{{ playbook_dir }}/../inventories/hosts"
    state: absent

- name: Clean up EnMasse artifacts
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/enmasse-{{ enmasse_version }}.tgz
    - /tmp/enmasse-{{ enmasse_version }}
  when: enmasse_clean_artifacts
